<?php
use Drupal\GithubBehatEditor,
    Drupal\BehatEditor;
/**
 * @file
 * Github repo integration to BehatEditor
 */

function github_behat_editor_permission(){
        $items['github behat choose repo'] = array(
            'title' => t('View a test file'),
            'description' => t('Can view a singular test')
        );
        $items['github behat admin settings'] = array(
            'title' => t('Can Admin Settings'),
            'description' => t('Can Admin Settings')
        );
        return $items;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function github_behat_editor_ctools_plugin_api() {
    list($module, $api) = func_get_args();
    if ($module == "services" && $api == "services") {
        return array("version" => "3");
    }
}

/**
 * Implements hook_menu().
 *
 * @todo use services for the run endpoint
 */
function github_behat_editor_menu() {
    $path = drupal_get_path('module', 'github_behat_editor');
    $items['admin/behat/github_settings'] =  array(
        'title' => 'Github Repos',
        'access arguments' => array('github behat admin settings'),
        'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
        'weight' => 20,
        'page callback' => 'github_behat_editor_repos_user',
        'file path' => "$path/includes",
        'file' => 'github_behat_editor_repos_user.inc',
    );

    $items['admin/behat/github_settings/user'] =  array(
        'title' => 'Github Repos for User',
        'access arguments' => array('github behat admin settings'),
        'type' => MENU_DEFAULT_LOCAL_TASK ,
        'weight' => -5,
    );

    $items['admin/behat/github_settings/groups'] =  array(
        'title' => 'Github Repos for Group',
        'access arguments' => array('github behat admin settings'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 10,
        'page callback' => 'github_behat_editor_repos_group',
        'file path' => "$path/includes/",
        'file' => 'github_behat_editor_repos_group.inc',
    );

    $items['admin/behat/github_settings/migrate'] =  array(
        'title' => 'Github Repos Migrate',
        'access arguments' => array('github behat admin settings'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 10,
        'page callback' => 'github_behat_editor_migrate',
        'file path' => "$path/includes/",
        'file' => 'github_behat_editor_migrate.inc',
    );

    $items['admin/behat/github_settings/repos/%/%/%'] =  array(
        'title' => 'Add Github Repo for your user account',
        'access arguments' => array('behat admin settings'),
        'type' => MENU_CALLBACK,
        'weight' => 10,
        'page callback' => 'github_behat_editor_repos_manage',
        'page arguments' => array(4,5,6),
        'file path' => "$path/includes/",
        'file' => 'github_behat_editor_repos_manage.inc',
    );

    $items['admin/behat/github/sync'] =  array(
        'access arguments' => array('behat edit test'),
        'type' => MENU_CALLBACK,
        'page callback' => 'github_behat_editor_repo_sync',
        'page arguments' => array(4,5),
    );
    return $items;
}

function github_behat_editor_repo_sync() {
    composer_manager_register_autoloader();
    $current_url = $_REQUEST['current_url'];
    $repo_path = array_slice(explode('/', $current_url), 4, 4);

    $repo_path = implode('/', $repo_path);
    $public = file_build_uri('/' . $repo_path);
    $repo_path = drupal_realpath($public);

    $repo_action = new GithubBehatEditor\GithubBehatEditorController();

    drupal_set_message("0", "This is the results of the sync");
    $output = $repo_action->manualAdd(array('full_path' => $repo_path));
    _github_behat_editor_set_message($output['error'], "Manual Git Add Message:  " . $output['message']);

    $output = $repo_action->manualCommit(array('full_path' => $repo_path));
    _github_behat_editor_set_message($output['error'], "Manual Git Commit Message:  " . $output['message']);

    $output = $repo_action->simplePull(array('full_path' => $repo_path));
    _github_behat_editor_set_message($output['error'], "Manual Git Pull  Message:  " . $output['message']);

    $output = $repo_action->simplePush(array('full_path' => $repo_path));
    _github_behat_editor_set_message($output['error'], "Manual Git File Message:  " . $output['message']);

    drupal_json_output("The page will reload now that the sync is done");
    exit();
}

function github_behat_editor_form_alter(&$form, &$form_state) {
    $forms = array('behat-editor-edit-form', 'behat-editor-add-form', 'behat-editor-view-form');
    global $user;
    if(in_array($form['#id'], $forms)) {
        $is_github = arg(3);
        /**
         * View Form
         */
        if($is_github == 'behat_github' && user_access("behat edit test") && $form['#id'] == 'behat-editor-view-form') {
            $edit_path = arg();
            $edit_path[2] = 'edit';
            $edit_path = implode('/', $edit_path);
            $form['actions']['edit_test'] = github_edit_test_array($edit_path);
        }

        /**
         * Add Button
         *
         */

        if($form['#id'] == 'behat-editor-add-form') {
            global $user;
            $github_from = new GithubBehatEditor\GithubBehatEditorController();
            $repos = $github_from->getallreposforuser($user);
            $links = array();
            $path = drupal_get_path('module', 'github_behat_editor');
            foreach($repos as $key => $value){
                $data['data-gid'] = $value['gid'];
                $data['data-uid'] = $value['uid'];
                $data['data-repo-name'] = $value['repo_name'];
                $data['data-folder'] = $value['folder'];
                $data['data-module'] = $value['repo_name'];
                ($value['gid'] == 0) ? $type = 'users' : $type = 'groups';
                ($value['gid'] == 0) ? $id = $value['uid'] : $id = $value['gid'];
                //For right now force into user folder they really should all be set as needed.
                //$value['uid'] was being passed needs to be dyanmic user $user->uid see BPFD-298
                $links[] = array(
                                    'data' =>l($value['repo_name'], "behat_github/users/{$user->uid}/{$value['repo_name']}/{$value['folder']}", array('attributes' => array('id' => $value['repo_name']))),
                                    'class' => array($value['repo_name'])
                                );
            }

            $list = theme('item_list', array('items' => $links, 'attributes' => array('class' => array('dropdown-menu'), 'role' => 'menu')));
            $form['actions']['github_add'] = array(
                '#type' => "button",
                '#value' => t('Add to Repo<span class="caret"></span>'),
                '#attributes' => array('type' => 'button', 'class' => array('btn', 'btn-danger', 'dropdown-toggle'), 'data-toggle' => 'dropdown'),
                '#prefix' => '<div class="btn-group gitrepo-choose">',
                '#suffix' => $list . '</div>'
            );
            $form['#attached']['js']['github_behat_editor_add'] = $path . '/js/github_behat_editor_add.js';
            $form['#attached']['css']['github_behat_editor_add'] = $path . '/css/github_behat_editor_app.css';
        }



        if($form['#id'] == 'behat-editor-view-form') {
            global $user;
            $github_from = new GithubBehatEditor\GithubBehatEditorController();
            $repos = $github_from->getallreposforuser($user);
            $links = array();
            $path = drupal_get_path('module', 'github_behat_editor');
            foreach($repos as $key => $value){
                $data['data-gid'] = $value['gid'];
                $data['data-uid'] = $value['uid'];
                $data['data-repo-name'] = $value['repo_name'];
                $data['data-folder'] = $value['folder'];
                $data['data-module'] = $value['repo_name'];
                ($value['gid'] == 0) ? $type = 'users' : $type = 'groups';
                ($value['gid'] == 0) ? $id = $value['uid'] : $id = $value['gid'];
                //For right now force into user folder they really should all be set as needed.
                //See BPFD-298 this was using value['uid'] but needed to user the user logged in
                $links[] = l($value['repo_name'], "behat_github/users/{$user->uid}/{$value['repo_name']}/{$value['folder']}");
            }

            $list = theme('item_list', array('items' => $links, 'attributes' => array('class' => array('dropdown-menu'), 'role' => 'menu')));
            $form['actions']['github_add'] = array(
                '#type' => "button",
                '#value' => t('Clone to Repo<span class="caret"></span>'),
                '#attributes' => array('type' => 'button', 'class' => array('btn', 'btn-danger', 'dropdown-toggle'), 'data-toggle' => 'dropdown'),
                '#prefix' => '<div class="btn-group gitrepo-choose">',
                '#suffix' => $list . '</div>'
            );

            if(arg(3) == 'behat_github') {
                $form['actions']['github_sync'] = array(
                    '#markup' => "<a href='#' class='btn btn-default sync-button'>Sync Repo</a>",
                );
            }

            $form['#attached']['js']['github_behat_editor_clone'] = $path . '/js/github_behat_editor_clone.js';
            $form['#attached']['js']['github_behat_editor_app'] = $path . '/js/github_behat_editor_app.js';
            $form['#attached']['css']['github_behat_editor_add'] = $path . '/css/github_behat_editor_app.css';

        }

        /**
         * Clone to Button
         *
         */
        if($is_github == 'behat_github' && ( $form['#id'] == 'behat-editor-view-form' || $form['#id'] == 'behat-editor-edit-form') ) {
            $github_from = new GithubBehatEditor\GithubBehatEditorController();
        }
    }
}

function github_edit_test_array($path) {
    if(user_access("behat edit test") ) {
        return array(
            '#type' => 'link',
            '#name' => 'edit_test',
            '#title' => t('Edit Test'),
            '#href' => "$path",
            '#attributes' => array('class' => array('btn', 'btn-info', 'edit')),
        );
    } else {
        return array();
    }

}

/**
 * Will be needed if github is down and commit is needed
 */
function github_behat_editor_cron() {

}


function _github_behat_editor_redirect_to_user_path(){
    global $user;
    if(arg(4) == 'users' && $user->uid != arg(5)) {
        $path = arg();
        $path[5] = $user->uid;
        drupal_goto(implode('/', $path));
    }

    if(arg(4) == 'groups' && arg(2) == 'edit') {
        $path = arg();
        $path[4] = 'users';
        $path[5] = $user->uid;
        drupal_goto(implode('/', $path));
    }
}


/**
 * Need to update the users repo incase this is a new file
 *
 *
 */
function github_behat_editor_behat_editor_before_edit_alter(&$data) {
    if($data['module'] == 'behat_github') {
        /**
         * 1. Make sure if the urls is groups we switch to the users path
         * 2. Check if the user is in the group
         * 3. Check if the group or user even has access to this repo
         * 4. Finally update the file to the latest one
         */
        _github_behat_editor_redirect_to_user_path();
        $repo_action = new GithubBehatEditor\GithubBehatEditorController();
        $repo_action->checkAccess(array('data' => $data, 'mode' => 'edit', 'arg' => arg()));
        $repo_action->redirectFromGroupToUserRepo(array('data' => $data, 'mode' => 'edit', 'arg' => arg()));
        $repo_array = array();
        $output = array();
        $path = $data['service_path'];
        $repo_name = $path[3];
        $id = $path[2];
        if($path[1] == 'groups') {
            $repo_array = $repo_action->getReposByRepoGroupIdAndRepoName($id, $repo_name);
        } elseif($path[1] == 'users') {
            $repo_array = $repo_action->getRepoByRepoName($repo_name, TRUE);
            $repo_array[$repo_name]['uid'] = $id;
            $repo_array[$repo_name]['gid'] = '0';
        }

        $output = $repo_action->updateFiles(array($repo_array));

        $message_type = 'status';
        if($output['error'] == 1) { $message_type = 'error '; }
        drupal_set_message("Git File Message:  " . $output['message'], $type = $message_type);
    }
}

/**
 * Alter the show behat_editor_edit()
 */

function github_behat_editor_behat_editor_edit_alter(&$data) {
    if($data['module'] == 'behat_github') {
        $repo_action = new GithubBehatEditor\GithubBehatEditorController();
        $repo_action->updateFileShow($data);
    }
}

/**
 * Alter the show hook_behat_editor_show()
 */

function github_behat_editor_behat_editor_after_delete_alter(&$data) {

    if($data['module'] == 'behat_github') {

        $git_actions = new GithubBehatEditor\GithubBehatEditorController();
        $results = $git_actions->delete($data);
        //@todo not sure the best way to send back data.
        if($results['error'] == 0) {
            drupal_set_message(t('File Delete and repo updated !message', array('!message' => $results['message'])));
            //@todo push this message back to the screen using ajax
            $data['messages'][] = $results['message'];
        } else {
            drupal_set_message(t('Error processing file !error', array('!error' => $results['message'])));
            $data['messages'][] =  t('Error adding file to the repo file !error', array('!error' => $results['message']));
        }
    }
}


/**
 * Alter the show hook_behat_editor_show()
 */

function github_behat_editor_behat_editor_after_create_alter(&$data) {
    if($data['module'] == 'behat_github') {
        $git_actions = new GithubBehatEditor\GithubBehatEditorController();
        $results = $git_actions->create($data);
        //@todo not sure the best way to send back data.
        if($results['error'] == 0) {
            drupal_set_message(t('File Added and Pushed to repo !message', array('!message' => $results['message'])));
            //@todo push this message back to the screen using ajax
            $data['messages'][] = $results['message'];
        } else {
            drupal_set_message(t('Error processing file !error', array('!error' => $results['message'])));
            $data['messages'][] =  t('Error adding file to the repo file !error', array('!error' => $results['message']));
        }

        if(!empty($repo_array)) {}
    }
}

/**
 * Need to update the users repo incase this is a new file
 *
 *
 */
function github_behat_editor_behat_editor_before_view_alter(&$data) {
    if($data['module'] == 'behat_github') {
        /**
         * 1. Make sure if the urls is groups we switch to the users path
         * 2. Check if the user is in the group
         * 3. Check if the group or user even has access to this repo
         * 4. Finally update the file to the latest one
         */
        _github_behat_editor_redirect_to_user_path();
        $repo_action = new GithubBehatEditor\GithubBehatEditorController();
        $repo_action->checkAccess(array('data' => $data, 'mode' => 'view', 'arg' => arg()));
        $repo_action->redirectFromGroupToUserRepo(array('data' => $data, 'mode' => 'edit', 'arg' => arg()));
        $repo_array = array();
        $output = array();
        $path = $data['service_path'];
        $repo_name = $path[3];
        $id = $path[2];
        if($path[1] == 'groups') {
            $repo_array = $repo_action->getReposByRepoGroupIdAndRepoName($id, $repo_name);
        } elseif($path[1] == 'users') {
            $repo_array = $repo_action->getRepoByRepoName($repo_name, TRUE);
            $repo_array[$repo_name]['uid'] = $id;
            $repo_array[$repo_name]['gid'] = '0';
        }

        $repo_array_one = array_pop($repo_array);
        $path = $repo_action->get_full_path_using_repo_query_results(array('repo_array' => $repo_array_one));

        $output = $repo_action->checkIfFolderExists(array('repo_array' => $repo_array_one));
        _github_behat_editor_set_message($output['error'], "Git Check Folder Exists Message:  " . $output['message']);

        if($output === FALSE) {
            $output = $repo_action->setFolderForGit( array('full_path' => $path) );
            _github_behat_editor_set_message($output['error'], "Git Set Folder Message:  " . $output['message']);
        }

        if ( !$repo_action->checkIfGitFolderExists(array('repo_array' => $repo_array_one)) ) {
            $repo_url = $this->buildAuthGitUrl(array('repo_array' => $repo_array));
            $output = $this->cloneRepo(array('destination' => $path, 'use_current_path' => TRUE, 'full_repo_path' => $repo_url));
            _github_behat_editor_set_message($output['error'], "Git Build git folder Message:  " . $output['response']);

        } else {
            $output = $repo_action->simpleAdd(array('full_path' => $path));
            _github_behat_editor_set_message($output['error'], "Git Add Message:  " . $output['message']);

            $output = $repo_action->simpleCommit(array('full_path' => $path));
            _github_behat_editor_set_message($output['error'], "Git Commit Message:  " . $output['message']);

            $output = $repo_action->simplePull(array('full_path' => $path));
            _github_behat_editor_set_message($output['error'], "Git Pull  Message:  " . $output['message']);

            $output = $repo_action->simplePush(array('full_path' => $path));
            _github_behat_editor_set_message($output['error'], "Git File Message:  " . $output['message']);
        }
    }
}

function _github_behat_editor_set_message($error = 0, $message = FALSE) {
    $message_type = 'status';
    if($error == 1) { $message_type = 'error '; }
    drupal_set_message($message, $type = $message_type);
    watchdog('github_editor_view_post_alter', $message, array(), WATCHDOG_NOTICE);
}

/**
 * Alter the show hook_behat_editor_show()
 *
 * Update the file before the user views it.
 * Figure out if it is a group or user file
 * and then update it from the correct repo
 *
 */

function github_behat_editor_behat_editor_view_alter(&$data) {
    if($data['module'] == 'behat_github') {
        $repo_action = new GithubBehatEditor\GithubBehatEditorController();
        $repo_action->updateFileShow($data);
    }
}


/**
 * Alter the show hook_behat_editor_show()
 */

function github_behat_editor_behat_editor_after_view_alter(&$data) {
    if($data['module'] == 'behat_github') {
        $git_actions = new GithubBehatEditor\GithubBehatEditorController();
        $results = $git_actions->create($data);
        //@todo not sure the best way to send back data.
        if($results['error'] == 0) {
            drupal_set_message(t('File Added and Pushed to repo !message', array('!message' => $results['message'])));
            //@todo push this message back to the screen using ajax
            $data['messages'][] = $results['message'];
        } else {
            drupal_set_message(t('Error processing file !error', array('!error' => $results['message'])));
            $data['messages'][] =  t('Error adding file to the repo file !error', array('!error' => $results['message']));
        }
    }
}

/**
 * Alter the show hook_behat_editor_show()
 */

function github_behat_editor_behat_editor_after_save_alter(&$data) {
    if($data['module'] == 'behat_github') {
        $git_actions = new GithubBehatEditor\GithubBehatEditorController();
        $results = $git_actions->update($data);
        //@todo not sure the best way to send back data.
        if($results['error'] == 0) {
            drupal_set_message(t('File Added and Pushed to repo !message', array('!message' => $results['message'])));
            //@todo push this message back to the screen using ajax
            $data['messages'][] =  $results['message'];
        } else {
            drupal_set_message(t('Error processing file !error', array('!error' => $results['message'])));
            $data['messages'][] =  t('Error pushing file back to the repo file !error', array('!error' => $results['message']));
        }
    }
}


/**
 * Alter the show hook_behat_editor_index()
 */
function github_behat_editor_behat_editor_index_alter(&$data) {
        //@note I moved this to the github_behat_editor_behat_editor_files_found_alter
        //@todo clean up if this really seems better.
        //$github_load = new GithubBehatEditor\GithubBehatEditorController();
        //$data = $github_load->index($data);
}

function github_behat_editor_behat_editor_files_found_alter(&$data, $context) {
    if($context == 'public') {
        $github_load = new GithubBehatEditor\GithubBehatEditorController();
        $data = $github_load->index($data);
    }
}

/**
 * Implements hook_behat_editor_results_per_file()
 * to get the results per file and see if it needs some
 * help
 */
function github_behat_editor_behat_editor_results_per_file_alter(&$rows, $params) {
    $filename = $params['filename'];
    $module = $params['module'];
    $file_object = $params['file_object'];
    //1. if rows are blank
    //2. the module is not behat_tests and the path for module is FALSE then take a look at the settings
    //3. if the settings path include behat_github then put that into the results and or query again since
    //   results most likely are null
    if(empty($rows)) {
        if(!drupal_get_path('module', $module) && $module != 'behat_tests') {
            $query_results = new Drupal\BehatEditor\Results();
            if($file_object['module'] == 'behat_github') {
                $data = $query_results->getLatestResultForFile('behat_github', $filename, $file_object, FALSE);
                $rows = $data['results'];
            }
        }
    }
}


/**
 * Implements the hook_og_memebership_insert
 * and on new user will setup the Group repos
 * @param OgMembership $og_membership
 */
function  github_behat_editor_og_membership_insert(OgMembership $og_membership) {
    drupal_set_message(t('You can update your github repositories for this group here !link',
        array('!link' => l('Admin Repos', 'admin/behat/github_settings/groups'))));
    composer_manager_register_autoloader();
    $uid = $og_membership->etid;
    $user = user_load($uid);
    $repo_action = new GithubBehatEditor\GithubBehatEditorController($user);
    $group_repos = $repo_action->getReposByRepoGroupId(array('chosen' => array($og_membership->gid)));
    foreach($group_repos as $key => $repo_array) {
        $repo_array['gid'] = 0;
        $repo_array['uid'] = $uid;
        _github_behat_editor_setup_repos(array('repo_array' => $repo_array, 'repo_action' => $repo_action));
    }
}

function _github_behat_editor_setup_repos($params) {
    $repo_array = $params['repo_array'];
    $repo_action = $params['repo_action'];
    $path = $repo_action->get_full_path_using_repo_query_results(array('repo_array' => $repo_array));
    if ( !$repo_action->checkIfFolderExists(array('repo_array' => $repo_array)) ) {
        $path = $repo_action->getFullPath(array('repo_array' => $repo_array));
        $output = $repo_action->setFolderForGit( array('full_path' => $path) );
        drupal_set_message(t("Made folder !folder for !repo for user !message", array('!folder' => $path, '!repo' => $repo_array['repo_name'], '!message' => $output['message'])), $type = 'info');
    }

    if ( !$repo_action->checkIfGitFolderExists(array('repo_array' => $repo_array)) ) {
        //do a git clone in this folder
        $repo_url = $repo_action->buildAuthGitUrl(array('repo_array' => $repo_array));
        $repo_action->cloneRepo(array('destination' => $path, 'use_current_path' => TRUE, 'full_repo_path' => $repo_url));
        drupal_set_message(t("Cloned Group repo !repo for user !message", array('!repo' => $repo_array['repo_name'], '!message' => $output['message'])), $type = 'info');
    } else {
        //just do a check clean and pull if all is well
        $repo_action->checkIfDirty(array('full_path' => $path));
        //Finally just do a pull for making sure we have it all
        $test_folder = $path . '/' . $repo_array['folder'];
        $output = $repo_action->simplePull(array('full_path' => $test_folder));
        drupal_set_message(t("Updated Group repo !repo for user !message", array('!repo' => $repo_array['repo_name'], '!message' => $output['message'])), $type = 'info');
    }
}
