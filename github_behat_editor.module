<?php
use Drupal\GithubBehatEditor,
    Drupal\BehatEditor;
/**
 * @file
 * Github repo integration to BehatEditor
 */

function github_behat_editor_permission(){
        $items['github behat choose repo'] = array(
            'title' => t('View a test file'),
            'description' => t('Can view a singular test')
        );
        $items['github behat admin settings'] = array(
            'title' => t('Can Admin Settings'),
            'description' => t('Can Admin Settings')
        );
        return $items;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function github_behat_editor_ctools_plugin_api() {
    list($module, $api) = func_get_args();
    if ($module == "services" && $api == "services") {
        return array("version" => "3");
    }
}

/**
 * Implements hook_menu().
 *
 * @todo use services for the run endpoint
 */
function github_behat_editor_menu() {
    $path = drupal_get_path('module', 'github_behat_editor');
    $items['admin/behat/github_settings'] =  array(
        'title' => 'Github Repos',
        'access arguments' => array('github behat admin settings'),
        'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
        'weight' => 20,
        'page callback' => 'github_behat_editor_repos_user',
        'file path' => "$path/includes",
        'file' => 'github_behat_editor_repos_user.inc',
    );

    $items['admin/behat/github_settings/user'] =  array(
        'title' => 'Github Repos for User',
        'access arguments' => array('github behat admin settings'),
        'type' => MENU_DEFAULT_LOCAL_TASK ,
        'weight' => -5,
    );

    $items['admin/behat/github_settings/groups'] =  array(
        'title' => 'Github Repos for Group',
        'access arguments' => array('github behat admin settings'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 10,
        'page callback' => 'github_behat_editor_repos_group',
        'file path' => "$path/includes/",
        'file' => 'github_behat_editor_repos_group.inc',
    );

    $items['admin/behat/github_settings/repos/%/%/%'] =  array(
        'title' => 'Add Github Repo for your user account',
        'access arguments' => array('behat admin settings'),
        'type' => MENU_CALLBACK,
        'weight' => 10,
        'page callback' => 'github_behat_editor_repos_manage',
        'page arguments' => array(4,5,6),
        'file path' => "$path/includes/",
        'file' => 'github_behat_editor_repos_manage.inc',
    );

    return $items;
}

/**
 * Will be needed if github is down and commit is needed
 */
function github_behat_editor_cron() {

}

function github_behat_editor_behat_editor_files_found_alter(&$data, $context1 = array()) {
    composer_manager_register_autoloader();
    global $user;
    $files = new GithubBehatEditor\GithubDownloadedFiles();
    //Group Related Files
    $group_files = $files->getGroupFilesArray();
    $data = array_merge($data, $group_files);

    //Append Array of files
    //key => behat_github
    //first get group files for this user
    //  for each users groups parse the folders subfolder (from the db)
    //  the create a file object as needed.
    //then get user files to append collection or overwrite as needed
}

function github_behat_editor_behat_editor_build_path_alter(&$data, $params = array()) {
    global $user;
    $module = '';
    $filename = '';
    $action = '';
    $gid = '';
    $type = '';
    $repo_name = '';
    $service_path = array();
    $uid = $user->uid;

    watchdog('test_arg_104', print_r(arg(), 1));
    watchdog('test_params_106', print_r($params, 1));

    if(arg(3) == 'behat_github' || (isset($params) && $params['module'] == 'behat_github')) {
        $actions = array('view', 'edit', 'delete');
        if(isset($params) && !in_array($params['action'], $actions)) {
            //Run, CreateRun or Targeted Actions
            $service_path = $params['service_path'];
            $type = $service_path[5];
            $repo_name = $service_path[7];
            $action = $service_path[3];
            $module = $service_path[4];
            //Set Vars
            if($type == 'groups') {
                $gid = $service_path[6];
            } else {
                $gid = 0;
            }
        } else {
//            dpm("You are an arg");
            $service_path = arg();
            $type = $service_path[4];
            $repo_name = $service_path[6];
            $action = $service_path[2];
            $module = $service_path[3];
            //Set Vars
            if($type == 'groups') {
                $gid = $service_path[5];
            } else {
                $gid = 0;
            }
        }
//        dpm('Service Path');
//        dpm($service_path);
//        dpm("Args");
//        dpm(arg());

        $service_path_tweaked = $service_path;
        $filename = array_pop($service_path_tweaked);

        //Now process request based on user or group repo
        //
        if($gid == 0) {
            //This is a user based repo so just need to verify access
        } else {
            //This is a group id so we need to
            //  1. query to see if the user is in the group
            //  2. see if the user already cloned the repo
            $perms = new BehatEditor\BehatPermissions($uid);
            $users_groups = $perms->getGroupIDs();
            if(!in_array($gid, $users_groups)){
                //@todo better exit plan here
                drupal_set_message('You are not in this group');
                drupal_goto('/');
            }
            //See now if they already have this folder
            $repo_manager = new GithubBehatEditor\RepoManager();
            //Lets grab the full db info for this repo
            $repos = $repo_manager->getGroupRepo(array('gid' => $gid, 'repo_name' => $repo_name));
            if(empty($repos['results']) || $repos['error'] == 1){
                //@todo better exit plan here
                drupal_set_message(t('The !repo repo could not be found for the group', array('!repo' => $repo_name)));
                drupal_goto('admin/behat/index');
            }
            $repo_data = $repos['results'][0];
            $test_folder = $repo_data['folder'];
            $repo_account = $repo_data['repo_account'];
            $full_name = $repo_account .'/'. $repo_name;
            $repo_manager->cloneRepo(array($full_name), array('uid' => $user->uid, ''));
            $github_dowbload_files = new GithubBehatEditor\GithubDownloadedFile();
            $params = array(
                'service_path' => $service_path,
                'module' => $module,
                'filename' => $filename,
                'action' => $action,
                'subfolder' => $test_folder,
            );
//            dpm("Params");
//            dpm($params);
            $file_info = $github_dowbload_files->buildObject($params);
            $data = $file_info;
        }
    }
}