<?php
use Drupal\GithubBehatEditor,
    Drupal\BehatEditor;
/**
 * @file
 * Github repo integration to BehatEditor
 */

function github_behat_editor_permission(){
        $items['github behat choose repo'] = array(
            'title' => t('View a test file'),
            'description' => t('Can view a singular test')
        );
        $items['github behat admin settings'] = array(
            'title' => t('Can Admin Settings'),
            'description' => t('Can Admin Settings')
        );
        return $items;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function github_behat_editor_ctools_plugin_api() {
    list($module, $api) = func_get_args();
    if ($module == "services" && $api == "services") {
        return array("version" => "3");
    }
}

/**
 * Implements hook_menu().
 *
 * @todo use services for the run endpoint
 */
function github_behat_editor_menu() {
    $path = drupal_get_path('module', 'github_behat_editor');
    $items['admin/behat/github_settings'] =  array(
        'title' => 'Github Repos',
        'access arguments' => array('github behat admin settings'),
        'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
        'weight' => 20,
        'page callback' => 'github_behat_editor_repos_user',
        'file path' => "$path/includes",
        'file' => 'github_behat_editor_repos_user.inc',
    );

    $items['admin/behat/github_settings/user'] =  array(
        'title' => 'Github Repos for User',
        'access arguments' => array('github behat admin settings'),
        'type' => MENU_DEFAULT_LOCAL_TASK ,
        'weight' => -5,
    );

    $items['admin/behat/github_settings/groups'] =  array(
        'title' => 'Github Repos for Group',
        'access arguments' => array('github behat admin settings'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 10,
        'page callback' => 'github_behat_editor_repos_group',
        'file path' => "$path/includes/",
        'file' => 'github_behat_editor_repos_group.inc',
    );

    $items['admin/behat/github_settings/repos/%/%/%'] =  array(
        'title' => 'Add Github Repo for your user account',
        'access arguments' => array('behat admin settings'),
        'type' => MENU_CALLBACK,
        'weight' => 10,
        'page callback' => 'github_behat_editor_repos_manage',
        'page arguments' => array(4,5,6),
        'file path' => "$path/includes/",
        'file' => 'github_behat_editor_repos_manage.inc',
    );

    return $items;
}

function github_behat_editor_form_alter(&$form, &$form_state) {
    $forms = array('behat-editor-edit-form', 'behat-editor-add-form', 'behat-editor-view-form');
    global $user;
    if(in_array($form['#id'], $forms)) {
        $is_github = arg(3);
        /**
         * View Form
         */
        if($is_github == 'behat_github' && user_access("behat edit test") && $form['#id'] == 'behat-editor-view-form') {
            $edit_path = arg();
            $edit_path[2] = 'edit';
            $edit_path = implode('/', $edit_path);
            $form['actions']['edit_test'] = github_edit_test_array($edit_path);
        }

        /**
         * Edit Form
         */
        if($is_github == 'behat_github' && $form['#id'] == 'behat-editor-edit-form') {
//            $edit_path = arg();
//            $edit_path[2] = 'edit';
//            $edit_path = implode('/', $edit_path);
//            unset($form['actions']['delete_test']);
        }

        /**
         * Add Button
         *
         */

        if($form['#id'] == 'behat-editor-add-form') {
            global $user;
            $github_from = new GithubBehatEditor\GithubBehatEditorController();
            $repos = $github_from->getallreposforuser($user);
            $links = array();
            $path = drupal_get_path('module', 'github_behat_editor');
            foreach($repos as $key => $value){
                $data['data-gid'] = $value['gid'];
                $data['data-uid'] = $value['uid'];
                $data['data-repo-name'] = $value['repo_name'];
                $data['data-folder'] = $value['folder'];
                $data['data-module'] = $value['repo_name'];
                ($value['gid'] == 0) ? $type = 'users' : $type = 'groups';
                ($value['gid'] == 0) ? $id = $value['uid'] : $id = $value['gid'];
                //For right now force into user folder they really should all be set as needed.
                $links[] = array(
                                    'data' =>l($value['repo_name'], "behat_github/users/{$value['uid']}/{$value['repo_name']}/{$value['folder']}", array('attributes' => array('id' => $value['repo_name']))),
                                    'class' => array($value['repo_name'])
                                );
            }

            $list = theme('item_list', array('items' => $links, 'attributes' => array('class' => array('dropdown-menu'), 'role' => 'menu')));
            $form['actions']['github_add'] = array(
                '#type' => "button",
                '#value' => t('Add to Repo<span class="caret"></span>'),
                '#attributes' => array('type' => 'button', 'class' => array('btn', 'btn-danger', 'dropdown-toggle'), 'data-toggle' => 'dropdown'),
                '#prefix' => '<div class="btn-group gitrepo-choose">',
                '#suffix' => $list . '</div>'
            );
            $form['#attached']['js']['github_behat_editor_add'] = $path . '/js/github_behat_editor_add.js';
            $form['#attached']['css']['github_behat_editor_add'] = $path . '/css/github_behat_editor_app.css';
        }



        if($form['#id'] == 'behat-editor-view-form') {
            global $user;
            $github_from = new GithubBehatEditor\GithubBehatEditorController();
            $repos = $github_from->getallreposforuser($user);
            $links = array();
            $path = drupal_get_path('module', 'github_behat_editor');
            foreach($repos as $key => $value){
                $data['data-gid'] = $value['gid'];
                $data['data-uid'] = $value['uid'];
                $data['data-repo-name'] = $value['repo_name'];
                $data['data-folder'] = $value['folder'];
                $data['data-module'] = $value['repo_name'];
                ($value['gid'] == 0) ? $type = 'users' : $type = 'groups';
                ($value['gid'] == 0) ? $id = $value['uid'] : $id = $value['gid'];
                //For right now force into user folder they really should all be set as needed.
                $links[] = l($value['repo_name'], "behat_github/users/{$value['uid']}/{$value['repo_name']}/{$value['folder']}");
            }

            $list = theme('item_list', array('items' => $links, 'attributes' => array('class' => array('dropdown-menu'), 'role' => 'menu')));
            $form['actions']['github_add'] = array(
                '#type' => "button",
                '#value' => t('Clone to Repo<span class="caret"></span>'),
                '#attributes' => array('type' => 'button', 'class' => array('btn', 'btn-danger', 'dropdown-toggle'), 'data-toggle' => 'dropdown'),
                '#prefix' => '<div class="btn-group gitrepo-choose">',
                '#suffix' => $list . '</div>'
            );
            $form['#attached']['js']['github_behat_editor_add'] = $path . '/js/github_behat_editor_clone.js';
            $form['#attached']['css']['github_behat_editor_add'] = $path . '/css/github_behat_editor_app.css';

        }

        /**
         * Clone to Button
         *
         */
        if($is_github == 'behat_github' && ( $form['#id'] == 'behat-editor-view-form' || $form['#id'] == 'behat-editor-edit-form') ) {
            $github_from = new GithubBehatEditor\GithubBehatEditorController();
        }
    }
}

function github_edit_test_array($path) {
    if(user_access("behat edit test") ) {
        return array(
            '#type' => 'link',
            '#name' => 'edit_test',
            '#title' => t('Edit Test'),
            '#href' => "$path",
            '#attributes' => array('class' => array('btn', 'btn-info', 'edit')),
        );
    } else {
        return array();
    }

}

/**
 * Will be needed if github is down and commit is needed
 */
function github_behat_editor_cron() {

}

/**
 * Alter the show hook_behat_editor_show()
 */

function github_behat_editor_behat_editor_edit_alter(&$data) {
    if($data['module'] == 'behat_github') {
        /**
         * 1. Make sure if the urls is groups we switch to the users path
         * 2. Check if the user is in the group
         * 3. Check if the group or user even has access to this repo
         */
        $github_load = new GithubBehatEditor\GithubBehatEditorController();
        $github_load->checkAccess(array('data' => $data, 'mode' => 'edit', 'arg' => arg()));
        $github_load->redirectFromGroupToUserRepo(array('data' => $data, 'mode' => 'edit', 'arg' => arg()));
    }
}

/**
 * Alter the show hook_behat_editor_show()
 */

function github_behat_editor_behat_editor_after_delete_alter(&$data) {
    watchdog('test_delete_alter', print_r($data, 1));

    if($data['module'] == 'behat_github') {
        watchdog('test_delete_alter_if', print_r('You are here', 1));

        $git_actions = new GithubBehatEditor\GithubBehatEditorController();
        $results = $git_actions->delete($data);
        //@todo not sure the best way to send back data.
        if($results['error'] == 0) {
            drupal_set_message(t('File Delete and repo updated !message', array('!message' => $results['message'])));
            //@todo push this message back to the screen using ajax
            $data['messages'][] = $results['message'];
        } else {
            drupal_set_message(t('Error processing file !error', array('!error' => $results['message'])));
            $data['messages'][] =  t('Error adding file to the repo file !error', array('!error' => $results['message']));
        }
    }
}


/**
 * Alter the show hook_behat_editor_show()
 */

function github_behat_editor_behat_editor_after_create_alter(&$data) {
    if($data['module'] == 'behat_github') {
        $git_actions = new GithubBehatEditor\GithubBehatEditorController();
        $results = $git_actions->create($data);
        //@todo not sure the best way to send back data.
        if($results['error'] == 0) {
            drupal_set_message(t('File Added and Pushed to repo !message', array('!message' => $results['message'])));
            //@todo push this message back to the screen using ajax
            $data['messages'][] = $results['message'];
        } else {
            drupal_set_message(t('Error processing file !error', array('!error' => $results['message'])));
            $data['messages'][] =  t('Error adding file to the repo file !error', array('!error' => $results['message']));
        }
    }
}


/**
 * Alter the show hook_behat_editor_show()
 */

function github_behat_editor_behat_editor_after_view_alter(&$data) {
    if($data['module'] == 'behat_github') {
        $git_actions = new GithubBehatEditor\GithubBehatEditorController();
        $results = $git_actions->create($data);
        //@todo not sure the best way to send back data.
        if($results['error'] == 0) {
            drupal_set_message(t('File Added and Pushed to repo !message', array('!message' => $results['message'])));
            //@todo push this message back to the screen using ajax
            $data['messages'][] = $results['message'];
        } else {
            drupal_set_message(t('Error processing file !error', array('!error' => $results['message'])));
            $data['messages'][] =  t('Error adding file to the repo file !error', array('!error' => $results['message']));
        }
    }
}

/**
 * Alter the show hook_behat_editor_show()
 */

function github_behat_editor_behat_editor_after_save_alter(&$data) {
    if($data['module'] == 'behat_github') {
        $git_actions = new GithubBehatEditor\GithubBehatEditorController();
        $results = $git_actions->update($data);
        //@todo not sure the best way to send back data.
        if($results['error'] == 0) {
            drupal_set_message(t('File Added and Pushed to repo !message', array('!message' => $results['message'])));
            //@todo push this message back to the screen using ajax
            $data['messages'][] =  $results['message'];
        } else {
            drupal_set_message(t('Error processing file !error', array('!error' => $results['message'])));
            $data['messages'][] =  t('Error pushing file back to the repo file !error', array('!error' => $results['message']));
        }
    }
}


/**
 * Alter the show hook_behat_editor_index()
 */
function github_behat_editor_behat_editor_index_alter(&$data) {
        //@note I moved this to the github_behat_editor_behat_editor_files_found_alter
        //@todo clean up if this really seems better.
        //$github_load = new GithubBehatEditor\GithubBehatEditorController();
        //$data = $github_load->index($data);
}

function github_behat_editor_behat_editor_files_found_alter(&$data, $context) {
    if($context == 'public') {
        $github_load = new GithubBehatEditor\GithubBehatEditorController();
        $data = $github_load->index($data);
        watchdog('github_behat_editor', 'Ran files found all alter', array(), WATCHDOG_NOTICE);
    }
}


function  github_behat_editor_og_membership_insert(OgMembership $og_membership) {
    drupal_set_message(t('You can update your github repositories for this group here !link',
        array('!link' => l('Admin Repos', 'admin/behat/github_settings/groups'))));
        dpm($og_membership);
    composer_manager_register_autoloader();
    $gid = $og_membership->gid;
    //Get all repos for group and update user as needed
    $groups = new GithubBehatEditor\GithubBehatEditorController();
    $group_repos = $groups->getUsersGroupRepoByGid(array($gid));
    dpm($group_repos);
    $groups->checkIfRepoFolderExists($group_repos, arg(1));
    drupal_set_message("Updated Group repos for user");
}